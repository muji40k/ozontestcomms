// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"

	"github.com/google/uuid"
)

type Cursor interface {
	IsCursor()
	GetEndID() *uuid.UUID
}

type CommentCursor struct {
	Data  []*Comment `json:"data"`
	EndID *uuid.UUID `json:"end_id,omitempty"`
}

func (CommentCursor) IsCursor()                 {}
func (this CommentCursor) GetEndID() *uuid.UUID { return this.EndID }

type CommentInput struct {
	Content string `json:"content"`
}

type CreatePostInput struct {
	Title         string `json:"title"`
	Content       string `json:"content"`
	AllowComments *bool  `json:"allow_comments,omitempty"`
}

type Mutation struct {
}

type PostCursor struct {
	Data  []*Post    `json:"data"`
	EndID *uuid.UUID `json:"end_id,omitempty"`
}

func (PostCursor) IsCursor()                 {}
func (this PostCursor) GetEndID() *uuid.UUID { return this.EndID }

type PostModificationInput struct {
	AllowComments *bool `json:"allow_comments,omitempty"`
}

type Query struct {
}

type User struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
}

type CommentOrder string

const (
	CommentOrderDateAsc  CommentOrder = "DATE_ASC"
	CommentOrderDateDesc CommentOrder = "DATE_DESC"
)

var AllCommentOrder = []CommentOrder{
	CommentOrderDateAsc,
	CommentOrderDateDesc,
}

func (e CommentOrder) IsValid() bool {
	switch e {
	case CommentOrderDateAsc, CommentOrderDateDesc:
		return true
	}
	return false
}

func (e CommentOrder) String() string {
	return string(e)
}

func (e *CommentOrder) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommentOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CommentOrder", str)
	}
	return nil
}

func (e CommentOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CommentOrder) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CommentOrder) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PostOrder string

const (
	PostOrderDateAsc  PostOrder = "DATE_ASC"
	PostOrderDateDesc PostOrder = "DATE_DESC"
)

var AllPostOrder = []PostOrder{
	PostOrderDateAsc,
	PostOrderDateDesc,
}

func (e PostOrder) IsValid() bool {
	switch e {
	case PostOrderDateAsc, PostOrderDateDesc:
		return true
	}
	return false
}

func (e PostOrder) String() string {
	return string(e)
}

func (e *PostOrder) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostOrder", str)
	}
	return nil
}

func (e PostOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PostOrder) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PostOrder) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
