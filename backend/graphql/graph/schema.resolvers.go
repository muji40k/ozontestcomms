package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/muji40k/ozontestcomms/graphql/graph/model"
)

// Author is the resolver for the author field.
func (r *commentResolver) Author(ctx context.Context, obj *model.Comment) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Author - author"))
}

// Comments is the resolver for the comments field.
func (r *commentResolver) Comments(ctx context.Context, obj *model.Comment, after *uuid.UUID, limit int32, order *model.CommentOrder) (*model.CommentCursor, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, userID uuid.UUID, input model.CreatePostInput) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: CreatePost - createPost"))
}

// ModifyPost is the resolver for the modifyPost field.
func (r *mutationResolver) ModifyPost(ctx context.Context, userID uuid.UUID, postID uuid.UUID, input model.PostModificationInput) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: ModifyPost - modifyPost"))
}

// CommentPost is the resolver for the commentPost field.
func (r *mutationResolver) CommentPost(ctx context.Context, userID uuid.UUID, postID uuid.UUID, input model.CommentInput) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CommentPost - commentPost"))
}

// CommentComment is the resolver for the commentComment field.
func (r *mutationResolver) CommentComment(ctx context.Context, userID uuid.UUID, commentID uuid.UUID, input model.CommentInput) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CommentComment - commentComment"))
}

// Author is the resolver for the author field.
func (r *postResolver) Author(ctx context.Context, obj *model.Post) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Author - author"))
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post, after *uuid.UUID, limit int32, order *model.CommentOrder) (*model.CommentCursor, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id uuid.UUID) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, id uuid.UUID) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: Comment - comment"))
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, after *uuid.UUID, limit int32, order *model.PostOrder) (*model.PostCursor, error) {
	panic(fmt.Errorf("not implemented: Posts - posts"))
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
