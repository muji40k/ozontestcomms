// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=../../mock/comment/service.go
//

// Package mock_comment is a generated GoMock package.
package mock_comment

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	models "github.com/muji40k/ozontestcomms/internal/domain/models"
	collection "github.com/muji40k/ozontestcomms/internal/repository/collection"
	comment "github.com/muji40k/ozontestcomms/internal/service/interface/comment"
	result "github.com/muji40k/ozontestcomms/misc/result"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateCommentComment mocks base method.
func (m *MockService) CreateCommentComment(ctx context.Context, userId, commentID uuid.UUID, form comment.CommentForm) (models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentComment", ctx, userId, commentID, form)
	ret0, _ := ret[0].(models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommentComment indicates an expected call of CreateCommentComment.
func (mr *MockServiceMockRecorder) CreateCommentComment(ctx, userId, commentID, form any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentComment", reflect.TypeOf((*MockService)(nil).CreateCommentComment), ctx, userId, commentID, form)
}

// CreatePostComment mocks base method.
func (m *MockService) CreatePostComment(ctx context.Context, userId, postId uuid.UUID, form comment.CommentForm) (models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostComment", ctx, userId, postId, form)
	ret0, _ := ret[0].(models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostComment indicates an expected call of CreatePostComment.
func (mr *MockServiceMockRecorder) CreatePostComment(ctx, userId, postId, form any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostComment", reflect.TypeOf((*MockService)(nil).CreatePostComment), ctx, userId, postId, form)
}

// GetCommentsByCommentId mocks base method.
func (m *MockService) GetCommentsByCommentId(ctx context.Context, commentId uuid.UUID, order comment.CommentOrder) (collection.Collection[result.Result[models.Comment]], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByCommentId", ctx, commentId, order)
	ret0, _ := ret[0].(collection.Collection[result.Result[models.Comment]])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByCommentId indicates an expected call of GetCommentsByCommentId.
func (mr *MockServiceMockRecorder) GetCommentsByCommentId(ctx, commentId, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByCommentId", reflect.TypeOf((*MockService)(nil).GetCommentsByCommentId), ctx, commentId, order)
}

// GetCommentsById mocks base method.
func (m *MockService) GetCommentsById(ctx context.Context, ids ...uuid.UUID) (collection.Collection[result.Result[models.Comment]], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommentsById", varargs...)
	ret0, _ := ret[0].(collection.Collection[result.Result[models.Comment]])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsById indicates an expected call of GetCommentsById.
func (mr *MockServiceMockRecorder) GetCommentsById(ctx any, ids ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsById", reflect.TypeOf((*MockService)(nil).GetCommentsById), varargs...)
}

// GetCommentsByPostId mocks base method.
func (m *MockService) GetCommentsByPostId(ctx context.Context, postId uuid.UUID, order comment.CommentOrder) (collection.Collection[result.Result[models.Comment]], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPostId", ctx, postId, order)
	ret0, _ := ret[0].(collection.Collection[result.Result[models.Comment]])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPostId indicates an expected call of GetCommentsByPostId.
func (mr *MockServiceMockRecorder) GetCommentsByPostId(ctx, postId, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPostId", reflect.TypeOf((*MockService)(nil).GetCommentsByPostId), ctx, postId, order)
}
