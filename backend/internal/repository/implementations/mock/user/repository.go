// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=../../implementations/mock/user/repository.go
//

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	models "github.com/muji40k/ozontestcomms/internal/domain/models"
	collection "github.com/muji40k/ozontestcomms/internal/repository/collection"
	result "github.com/muji40k/ozontestcomms/misc/result"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetUsersById mocks base method.
func (m *MockRepository) GetUsersById(ctx context.Context, ids ...uuid.UUID) (collection.Collection[result.Result[models.User]], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersById", varargs...)
	ret0, _ := ret[0].(collection.Collection[result.Result[models.User]])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersById indicates an expected call of GetUsersById.
func (mr *MockRepositoryMockRecorder) GetUsersById(ctx any, ids ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersById", reflect.TypeOf((*MockRepository)(nil).GetUsersById), varargs...)
}
